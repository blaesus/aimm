// Adapted from github.com/civitai/civitai

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Registry {
  AimmHub
  Civitai
  Huggingface
  GitHub
  GitLab
}

model Repository {
  id           String   @id @default(uuid()) @db.Uuid
  name         String   @db.VarChar(255)
  subtype      String?
  registry     Registry @default(AimmHub)
  idInRegistry String
  updated      BigInt
  favour       BigInt
  raw          Json?

  revisions Revision[]

  @@unique([registry, idInRegistry])
  @@index([name])
  @@index([favour(sort: Desc)])
}

model Revision {
  id           String     @id @default(uuid()) @db.Uuid
  repoId       String     @db.Uuid
  repo         Repository @relation(fields: [repoId], references: [id], onDelete: Cascade)
  idInRegistry String
  hashA        String
  updated      BigInt
  raw          Json?

  fileRecords FileRecord[]

  @@unique([repoId, idInRegistry])
  @@index([repoId])
}

model FileRecord {
  id          String   @id @default(uuid()) @db.Uuid
  revisionId  String   @db.Uuid
  revision    Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  filename    String
  hashA       String
  downloadUrl String
  updated     BigInt
  raw         Json?
  size        BigInt?

  storageRecords FileStorageRecordOnFileRecord[]

  @@unique([revisionId, hashA])
  @@index([filename])
  @@index([revisionId, hashA])
}

enum StorageService {
  AWS_S3
  CloudFlare_R2
  BackBlaze_B2
  Local
}

model FileStorageRecord {
  id          String         @id @default(uuid()) @db.Uuid
  hashA       String
  service     StorageService
  idInService String
  created     BigInt
  size        BigInt
  raw         Json?

  fileRecords FileStorageRecordOnFileRecord[]

  @@index([idInService])
  @@index([hashA])
}

model FileStorageRecordOnFileRecord {
  fileStorageRecord   FileStorageRecord @relation(fields: [fileStorageRecordId], references: [id])
  fileStorageRecordId String            @db.Uuid
  fileRecord          FileRecord        @relation(fields: [fileRecordId], references: [id])
  fileRecordId        String            @db.Uuid
  assignmentTime      BigInt

  @@id([fileStorageRecordId, fileRecordId])
}

model FetchRecord {
  id         String  @id @default(uuid()) @db.Uuid
  category   String?
  fetcher    String?
  remotePath String
  time       BigInt
  successful Boolean
  status     Int?
  headers    String?
  data       String
  batch      String?

  @@index([remotePath])
}

model KeyValueCache {
  id       String @id @default(uuid()) @db.Uuid
  category String
  key      String
  value    String
  updated  BigInt

  @@unique([category, key])
  @@index([key], type: Hash)
}

model Account {
  id       String  @id @default(uuid()) @db.Uuid
  name     String  @unique
  disabled BigInt?

  credential     Credential?
  sessions       Session[]
  roles          Role[]
  RoleAssignment RoleAssignment[]
}

model Credential {
  id        Int     @id @default(autoincrement())
  account   Account @relation(fields: [accountId], references: [id])
  accountId String  @unique @db.Uuid

  hash    String
  salt    String
  updated BigInt
}

model Session {
  id               String  @id @default(uuid()) @db.Uuid
  account          Account @relation(fields: [accountId], references: [id])
  accountId        String  @unique @db.Uuid
  secret           String
  created          BigInt
  forceInvalidated Boolean
}

model Role {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?  @db.Uuid

  roleAssignments      RoleAssignment[]
  privilegePermissions PrivilegePermission[]
}

model RoleAssignment {
  id        String  @id @default(uuid()) @db.Uuid
  role      Role    @relation(fields: [roleId], references: [id])
  roleId    String  @db.Uuid
  account   Account @relation(fields: [accountId], references: [id])
  accountId String  @db.Uuid
  created   BigInt
}

enum ResourceType {
  Repository
  Revision
  FileRecord
  FileStorageRecord
  FetchRecord
  KeyValueCache
  Account
  Role
  RoleAssignment
  Privilege
  Other
}

enum Action {
  Create
  Read
  Update
  Delete
}

model Privilege {
  id      String       @id @default(uuid()) @db.Uuid
  name    String
  type    ResourceType
  target  String?      @db.Uuid
  action  Action
  data    Json?
  created BigInt

  privilegePermissions PrivilegePermission[]
}

model PrivilegePermission {
  id          String    @id @default(uuid()) @db.Uuid
  privilege   Privilege @relation(fields: [privilegeId], references: [id])
  privilegeId String    @db.Uuid
  role        Role      @relation(fields: [roleId], references: [id])
  roleId      String    @db.Uuid
  created     BigInt
}

enum JobStatus {
  Running
  Success
  Failure
  Scheduled
  Cancelled
  Interrupted
}

model Job {
  id        String    @id @default(uuid()) @db.Uuid
  status    JobStatus
  type      String
  label     String
  created   BigInt
  stopped   BigInt?
  total     Int?
  processed Int?
  data      Json?
}
